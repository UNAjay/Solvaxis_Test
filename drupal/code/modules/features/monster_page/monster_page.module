<?php
/**
 * @file
 * Code for the Monster Page feature.
 */

include_once 'monster_page.features.inc';


/**
 * Process variables for node.tpl.php.
 */
function monster_page_preprocess_node(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $view_mode = $variables['elements']['#view_mode'];
  $entity_type = $variables['elements']['#entity_type'];
  $node = $variables['elements']['#node'];

  if ($entity_type == 'node') {
    $variables['classes_array'][] = $view_mode;

    if ($node->type == 'section') {
      $variables['classes_array'][] = drupal_html_class('node-' . $node->nid);

      $sidebar = field_get_items($entity_type, $node, 'field_sidebar_text');
      $acton = field_get_items($entity_type, $node, 'field_acton_url');
      if ($sidebar || $acton) {
        $variables['classes_array'][] = drupal_html_class('with-sidebar');
      }
      $banner_style = field_get_items($entity_type, $node, 'field_banner_style');
      if ($banner_style) {
        $variables['classes_array'][] = drupal_html_class('banner-style-' . $banner_style[0]['value']);
      }
    }
  }

}


function monster_page_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'node' && $entity->type == 'section' && ($view_mode == 'full' || $view_mode == 'teaser')) {
    $page_wrapper = entity_metadata_wrapper('node', $entity);
    $page = $page_wrapper->field_section_node_eb->value(); // field_section_node_eb comes from Entityreference backreference
    if ($page) {
      $page_uri = entity_uri('node', reset($page));
      // $page_nid = reset($page)->nid;
      $fragment = 'node-' . $entity->nid;
      drupal_goto($page_uri['path'], array('fragment' => $fragment));
    }
  }

}



function monster_page_entity_view_alter(&$build, $entity_type) {
  // $view_mode = $build['#view_mode'];
  if ($entity_type == 'node' && $build['#bundle'] == 'section') {
    $node = $build['#node'];
    $ref_view = field_get_items($entity_type, $node, 'field_view');
    if ($ref_view) {
      $build['field_add_this']['#access'] = FALSE;
    }
  }
}


/**
 * Implements hook_form_alter().
 */
function monster_page_form_alter(&$form, $form_state, $form_id) {

  // Translatable webform fields placholders
  if (isset($form['#theme'][1]) && $form['#theme'][1] == 'webform_form') {
    foreach ($form['submitted'] as $key => $submitted) {

      if (is_array($submitted)) {
        if ($submitted['#type'] == 'select') {
          $form['submitted'][$key]['#empty_option'] = t($form['submitted'][$key]['#title']);
        }
        unset($form['submitted'][$key]['#title']);

        if (isset($submitted['#attributes'])
          && !empty($submitted['#attributes'])
          && isset($submitted['#attributes']['placeholder'])) {
            $placeholder = $submitted['#attributes']['placeholder'];
            $form['submitted'][$key]['#attributes']['placeholder'] = t($placeholder);
        }
      }
    }
  }
}


function monster_page_field_widget_form_alter(&$element, &$form_state, $context) {

  if ($context['field']['type'] == 'viewfield') {
    $field = $context['field'];
    $instance = $context['instance'];
    $options = _monster_page_viewfield_potential_references($field, $instance);
    $element['vname']['#options'] = $options;
    unset($element['vargs'], $element['token_help']);
  }
}


/**
 * Returns a select options list of views displays of enabled and allowed views.
 */
function _monster_page_viewfield_potential_references($field, $instance) {
  // Retrieve all currently available views.
  $views = views_get_enabled_views();
  // Limit to allowed values, if any.
  if (isset($instance['settings']['allowed_views']) && is_array($instance['settings']['allowed_views'])) {
    // Only intersect if at least one view has been enabled; otherwise, we would
    // end up with empty $views.
    if ($allowed = array_filter($instance['settings']['allowed_views'])) {
      $views = array_intersect_key($views, $allowed);
    }
  }
  $options = array();
  foreach ($views as $view_name => $view) {
    foreach ($view->display as $display) {
      if ($display->id != 'default') {
        $options[$view->name . '|' . $display->id] = $view->human_name . ' - ' . $display->display_title;
      }
    }
  }
  return $options;
}


/**
 * Function to do custom order of filter selectboxes
 * @param type $form
 * @param type $form_state
 * @return type
 */
function monster_page_form_views_exposed_form_alter(&$form, $form_state) {

  foreach ($form_state['view']->filter as $field => $filter) {
    if ($filter->options['exposed']) {
      $field_id = $form['#info']["filter-$field"]['value'];
      asort($form[$field_id]['#options']);
      if (isset($form[$field_id])) $form[$field_id]['#options']['All'] = t($form['#info']['filter-'.$field]['label']);
    }
  }
}


/**
 * Implementation of hook_filter_info().
 */
function monster_page_filter_info_alter(&$info) {
  $info['insert_block']['tips callback'] = 'monster_page_insert_block_tips';
}


function monster_page_insert_block_tips($filter, $format, $long = FALSE) {
  module_load_include('inc', 'block', 'block.admin');
  global $theme_key;
  $blocks = block_admin_display_prepare_blocks($theme_key);
  $modules = array('views', 'block');
  foreach ($blocks as $block) {
    if (in_array($block['module'], $modules)) {
      // $block_list[$block['delta']] = $block['info'] . ': [block:' . $block['module'] . '='. $block['delta'] . ']';

      $title = $block['info'];
      $key = '[block:' . $block['module'] . '='. $block['delta'] . ']';
      $rows[$block['delta']] = array($title, $key);
      if ($block['module'] == 'views' && substr($block['delta'], 0, 3) != 'ref') {
        // unset($block_list[$block['delta']]);
        unset($rows[$block['delta']]);
      }

    }
  }
  // $data['#attributes'] = array('class' => array('block-list'));
  // $data['items'] = $block_list;

  $table_data = array(
      'header'     => array('Title', 'Key'),
      'rows'       => $rows,
      'sticky'     => FALSE,
      'empty'      => 'No results found',
      'attributes' => array(),
      'colgroups'  => array(),
      'caption'    => NULL
    );




  $output = '';
  $output .= t('You may use <a href="@insert_block_help">[block:<em>module</em>=<em>delta</em>] tags</a> to display the contents of block <em>delta</em> for module <em>module</em>.',
    array("@insert_block_help" => url("filter/tips/$format->format", array('fragment' => 'filter-insert_block'))));

  // $output .= theme('item_list', $data);
  $output .= theme_table($table_data);
  return $output;
}






